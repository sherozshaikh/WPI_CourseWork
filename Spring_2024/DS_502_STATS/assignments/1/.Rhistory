list.files()
getwd()
list.files()
list.files("/Users/macbook_pro/Downloads/")
list.files("/Users/macbook_pro/Downloads/WPI_Fall_2023/")
list.files("/Users/macbook_pro/Downloads/WPI_Fall_2023/spring_2024")
list.files("/Users/macbook_pro/Downloads/WPI_Fall_2023/spring_2024/ds_502_stats/")
list.files("/Users/macbook_pro/Downloads/WPI_Fall_2023/spring_2024/ds_502_stats/assignment/1/")
setwd("/Users/macbook_pro/Downloads/WPI_Fall_2023/spring_2024/ds_502_stats/assignment/1/")
list.files()
college <- read.csv("./College.csv")
rownames(college)=college[,1]
fix(college)
college=college[,-1]
fix(college)
summary(college)
pairs(college[,1:10])
college[,1]=as.numeric(factor(college[,1]))
pairs(college[,1:10])
boxplot(college$Outstate~college$Private)
Elite <- rep("No", nrow(college ))
Elite[college$Top10perc > 50] <- "Yes"
Elite <- as.factor(Elite)
college <- data.frame(college, Elite)
summary(college$Elite)
boxplot(college$Outstate~college$Elite)
par(mfrow=c(4,4))
hist(college$Apps)
hist(college$Accept)
hist(college$Enroll)
hist(college$Top10perc)
hist(college$Top25perc)
hist(college$F.Undergrad)
hist(college$P.Undergrad)
hist(college$Outstate)
hist(college$Room.Board)
hist(college$Books)
hist(college$Personal)
hist(college$PhD)
hist(college$Terminal)
hist(college$S.F.Ratio)
hist(college$Expend)
hist(college$perc.alumni)
plot(college$Private, college$Outstate, xlab = "Private", ylab = "Outstate", col = "blue", main = "Outstate vs Private", pch = 19)
boxplot(college$Private, college$Outstate, xlab = "Private", ylab = "Outstate", col = "blue", main = "Outstate vs Private", pch = 19)
Elite <- rep("No", nrow(college ))
boxplot(college$Private, college$Outstate, xlab = "Private", ylab = "Outstate", col = "blue", main = "Outstate vs Private", pch = 19)
View(college)
library(ggplot2)
# Explore the structure of the dataset
str(college)
# Histogram of numerical variables
num_vars <- c("Apps", "Accept", "Enroll", "Top10perc", "Top25perc",
"F.Undergrad", "P.Undergrad", "Outstate", "Room.Board",
"Books", "Personal", "PhD", "Terminal", "S.F.Ratio",
"perc.alumni", "Expend", "Grad.Rate")
par(mfrow=c(4, 5))
for (var in num_vars) {
hist(college[[var]], main=var, xlab="", col="skyblue", border="white")
}
# Density plot of numerical variables
par(mfrow=c(4, 5))
for (var in num_vars) {
density_plot <- ggplot(college, aes(x = college[[var]])) +
geom_density(fill = "skyblue", color = "blue") +
labs(title = var)
print(density_plot)
}
# Create a list to store density plots
density_plots <- list()
# Loop through each numerical variable and create density plot
for (var in num_vars) {
density_plot <- ggplot(college_data, aes(x = college_data[[var]])) +
geom_density(fill = "skyblue", color = "blue") +
labs(title = var)
density_plots[[var]] <- density_plot
}
ore density plots
# Create a list to store density plots
density_plots <- list()
# Loop through each numerical variable and create density plot
for (var in num_vars) {
density_plot <- ggplot(college, aes(x = college[[var]])) +
geom_density(fill = "skyblue", color = "blue") +
labs(title = var)
density_plots[[var]] <- density_plot
}
# Arrange density plots in a grid
plot_grid(plotlist = density_plots, nrow = 6, ncol = 3)
library(cowplot)
library(cowplot)
# Create a list to store density plots
density_plots <- list()
# Loop through each numerical variable and create density plot
for (var in num_vars) {
density_plot <- ggplot(college, aes(x = college[[var]])) +
geom_density(fill = "skyblue", color = "blue") +
labs(title = var)
density_plots[[var]] <- density_plot
}
# Arrange density plots in a grid
plot_grid(plotlist = density_plots, nrow = 6, ncol = 3)
library(cowplot)
# Create a list to store density plots
density_plots <- list()
# Loop through each numerical variable and create density plot
for (var in num_vars) {
density_plot <- ggplot(college, aes(x = college[[var]])) +
geom_density(fill = "skyblue", color = "blue") +
# labs(title = var)
density_plots[[var]] <- density_plot
}
density_plot <- ggplot(college, aes(x = college[[var]])) +
geom_density(fill = "skyblue", color = "blue") # + labs(title = var)
library(cowplot)
# Create a list to store density plots
density_plots <- list()
# Loop through each numerical variable and create density plot
for (var in num_vars) {
density_plot <- ggplot(college, aes(x = college[[var]])) +
geom_density(fill = "skyblue", color = "blue") # + labs(title = var)
density_plots[[var]] <- density_plot
}
# Arrange density plots in a grid
plot_grid(plotlist = density_plots, nrow = 6, ncol = 3)
# Create a list to store density plots
density_plots <- list()
# Loop through each numerical variable and create density plot
for (var in num_vars) {
density_plot <- ggplot(college, aes(x = .data[[var]])) +
geom_density(fill = "skyblue", color = "blue") + labs(title = var)
density_plots[[var]] <- density_plot
}
# Arrange density plots in a grid
plot_grid(plotlist = density_plots, nrow = 6, ncol = 3)
# Correlation matrix
cor_matrix <- cor(college[num_vars])
print(cor_matrix)
# Load required library for correlation plot
library(corrplot)
# Correlation matrix
cor_matrix <- cor(college[num_vars])
print(cor_matrix)
# Plot correlation matrix
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45)
# Boxplot comparing private and public institutions
boxplot(college$Outstate ~ college$Private,
main="Out-of-State Tuition by Private/Public Institution",
xlab="Private", ylab="Out-of-State Tuition", col=c("skyblue", "lightgreen"))
# Scatter plot of Apps vs. Accept
plot(college$Apps, college$Accept,
xlab="Number of Applications", ylab="Number of Acceptances",
main="Applications vs. Acceptances", col="skyblue")
# Missing values
missing_values <- sapply(college, function(x) sum(is.na(x)))
print(missing_values)
# Comparing graduation rates between private and public institutions
boxplot(college$Grad.Rate ~ college$Private,
main="Graduation Rate by Private/Public Institution",
xlab="Private", ylab="Graduation Rate", col=c("skyblue", "lightgreen"))
# Investigating expenditure per student
expend_private <- college$Expend[college$Private == "Yes"]
expend_public <- college$Expend[college$Private == "No"]
par(mfrow=c(1, 2))
boxplot(expend_private, main="Private Institutions",
ylab="Expenditure per Student", col="skyblue", border="white")
# Investigating expenditure per student
expend_private <- college$Expend[college$Private == "Yes"]
expend_public <- college$Expend[college$Private == "No"]
par(mfrow=c(1, 2))
boxplot(expend_private, main="Private Institutions",
ylab="Expenditure per Student", col="skyblue", border="white")
# Investigating expenditure per student
expend_private <- college$Expend[college$Private == "Yes"]
expend_public <- college$Expend[college$Private == "No"]
# Check for missing values in Expend variable for private institutions
missing_expend_private <- sum(is.na(expend_private))
print(paste("Missing values in Expend for private institutions:", missing_expend_private))
# Check for missing values in Expend variable for public institutions
missing_expend_public <- sum(is.na(expend_public))
print(paste("Missing values in Expend for public institutions:", missing_expend_public))
# Check for infinite values in Expend variable for private institutions
infinite_expend_private <- sum(!is.finite(expend_private))
print(paste("Infinite values in Expend for private institutions:", infinite_expend_private))
# Check for infinite values in Expend variable for public institutions
infinite_expend_public <- sum(!is.finite(expend_public))
print(paste("Infinite values in Expend for public institutions:", infinite_expend_public))
par(mfrow=c(1, 2))
boxplot(expend_private, main="Private Institutions",
ylab="Expenditure per Student", col="skyblue", border="white")
par(mfrow=c(1, 2))
boxplot(expend_private, main="Private Institutions",
ylab="Expenditure per Student", col="skyblue", border="white")
# Comparing graduation rates between private and public institutions
boxplot(college$Grad.Rate ~ college$Private,
main="Graduation Rate by Private/Public Institution",
xlab="Private", ylab="Graduation Rate", col=c("skyblue", "lightgreen"))
# Distribution of student-faculty ratios
hist(college$S.F.Ratio, main="Student-Faculty Ratio Distribution",
xlab="Student-Faculty Ratio", col="skyblue", border="white")
ls()
rm( cor_matrix, density_plot, density_plots, Elite, expend_private, expend_public, infinite_expend_private, infinite_expend_public, missing_expend_private, missing_expend_public, missing_values, num_vars, var)
rm(college)
ls()
auto <- read.csv("./Auto.csv",header=TRUE,na.strings="?")
summary(auto)
auto<-na.omit(auto)
head(auto)
quantitative
str(Auto)
str(auto)
sapply(auto[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], range)
# Mean of each quantitative predictor
sapply(Auto[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], mean)
# Mean of each quantitative predictor
sapply(auto[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], mean)
# Standard deviation of each quantitative predictor
sapply(auto[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], sd)
# Removing 10th through 85th observations
auto_subset <- auto[-c(10:85),]
# Range of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], range)
# Mean of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], mean)
# Standard deviation of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], sd)
# Removing 10th through 85th observations
auto_subset <- auto[-c(10:85)]
# Range of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], range)
# Mean of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], mean)
# Standard deviation of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], sd)
# Removing 10th through 85th observations
auto_subset <- auto[-c(10:85),]
# Range of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], range)
# Mean of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], mean)
# Standard deviation of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], sd)
# Removing 10th through 85th observations
auto_subset <- auto[-c(10:85),]
print(dim(auto_subset))
# Range of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], range)
# Mean of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], mean)
# Standard deviation of each predictor in the subset
sapply(auto_subset[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")], sd)
# Scatterplot matrix of quantitative predictors
pairs(auto[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")])
# Correlation matrix
# Load required library for correlation plot
library(corrplot)
# Correlation matrix
cor_matrix <- cor(auto[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")])
print(cor_matrix)
# Plot correlation matrix
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45)
# Fitting regression models to assess predictor importance
lm_mpg <- lm(mpg ~ ., data = Auto)
# Fitting regression models to assess predictor importance
lm_mpg <- lm(mpg ~ ., data = auto)
summary(lm_mpg)
# Plotting the coefficients
plot(coef(lm_mpg)[-1], xlab = "Predictor", ylab = "Coefficient",
main = "Coefficients of the Linear Regression Model for MPG")
par(mfrow=c(3,3))
hist(auto$mpg)
hist(auto$cylinders)
hist(auto$displacement)
hist(auto$horsepower)
hist(auto$weight)
hist(auto$acceleration)
hist(auto$year)
boxplot(auto$weight~auto$mpg)
boxplot(auto$cylinders~auto$mpg)
boxplot(auto$displacement~auto$mpg)
boxplot(auto$horsepower~auto$mpg)
boxplot(auto$acceleration~auto$mpg)
boxplot(auto$mpg~auto$weight)
boxplot(auto$cylinders~auto$mpg)
boxplot(auto$mpg~auto$weight)
boxplot(auto$mpg~auto$cylinders)
boxplot(auto$mpg~auto$displacement)
boxplot(auto$mpg~auto$horsepower)
boxplot(auto$mpg~auto$acceleration)
boxplot(auto$mpg~auto$weight)
boxplot(auto$mpg~auto$weight)
# boxplot(auto$mpg~auto$weight)
boxplot(auto$mpg~auto$cylinders)
boxplot(auto$mpg~auto$displacement)
boxplot(auto$mpg~auto$horsepower)
boxplot(auto$mpg~auto$acceleration)
rm(auto_subset,cor_matrix,lm_mpg)
ls()
cor(auto)
cor(auto[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")])
library(ISLR)
data(auto)
lm_auto_fit <- lm(mpg~horsepower,data=auto)
summary(lm_auto_fit)
View(lm_auto_fit)
# Predicting mpg for horsepower = 98
predict(lm_model, newdata = data.frame(horsepower = 98), interval = "confidence", level = 0.95)
?predict()
# Predicting mpg for horsepower = 98
predict(lm_auto_fit, newdata = data.frame(horsepower = 98), interval = "confidence", level = 0.95)
predict(lm_auto_fit, newdata = data.frame(horsepower = 98), interval = "prediction", level = 0.95)
plot(auto$horsepower~auto$mpg, main="horsepower vs mpg", xlab="horsepower", ylab="mpg", col="skyblue")
abline(fit,col="red")
plot(auto$horsepower~auto$mpg, main="horsepower vs mpg", xlab="horsepower", ylab="mpg", col="skyblue")
abline(lm_auto_fit,col="red")
plot(auto$horsepower~auto$mpg, main="horsepower vs mpg", xlab="horsepower", ylab="mpg", col="black")
abline(lm_auto_fit,col="red")
# Perform simple linear regression
lm_model <- lm(mpg ~ horsepower, data = Auto)
rm(lm_model)
lm_auto_fit <- lm(mpg~horsepower,data=auto)
summary(lm_auto_fit)
# Predicting mpg for horsepower = 98
predict(lm_auto_fit, newdata = data.frame(horsepower = 98), interval = "confidence", level = 0.95)
predict(lm_auto_fit, newdata = data.frame(horsepower = 98), interval = "prediction", level = 0.95)
# Plot the response and predictor variables
plot(auto$horsepower, auto$mpg, main="Linear Regression: MPG vs Horsepower", xlab="horsepower", ylab="mpg", col="black")
# Add the least squares regression line
abline(lm_auto_fit, col="red")
# Use the plot() function to produce diagnostic plots
plot(lm_auto_fit)
pairs(auto)
pairs(auto[, c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration", "year")])
names(auto)
cor(auto[1:8])
pairs(auto[1:8])
lm_auto_fit <- lm(mpg ~ . - name, data = auto)
summary(lm_auto_fit)
# Use the plot() function to produce diagnostic plots
plot(lm_auto_fit)
names(auto)
View(auto)
# Fit linear regression models with transformed variables
lm_auto_fit <- lm(mpg ~ log(horsepower) + sqrt(displacement), data=auto[,1:8])
# Summary of the regression model with transformed variables
summary(lm_auto_fit)
lm_auto_fit <- lm(mpg ~ log(horsepower) + sqrt(horsepower), data=auto[,1:8])
summary(lm_auto_fit)
lm_auto_fit <- lm(mpg ~ log(horsepower) + sqrt(weight), data=auto[,1:8])
summary(lm_auto_fit)
lm_auto_fit <- lm(mpg ~ log(horsepower) + acceleration^2, data=auto[,1:8])
summary(lm_auto_fit)
lm_auto_fit <- lm(mpg ~ log(horsepower) + sqrt(displacement) + sqrt(horsepower) + sqrt(weight) + acceleration^, data=auto[,1:8])
lm_auto_fit <- lm(mpg ~ log(horsepower) + sqrt(displacement) + sqrt(horsepower) + sqrt(weight) + acceleration^2, data=auto[,1:8])
summary(lm_auto_fit)
rm(auto,lm_auto_fit)
ls()
clear()
cls()
getwd()
list.files()
list.files("/Users/macbook_pro/Downloads/WPI_Fall_2023/spring_2024/ds_502_stats/assignment/1/")
setwd("/Users/macbook_pro/Downloads/WPI_Fall_2023/spring_2024/ds_502_stats/assignment/1/")
list.files()
college <- read.csv("./College.csv")
rownames(college)=college[,1]
fix(college)
college=college[,-1]
fix(college)
summary(college)
college[,1]=as.numeric(factor(college[,1]))
pairs(college[,1:10])
par(mfrow=c(4,4))
hist(college$Apps)
hist(college$Accept)
hist(college$Enroll)
hist(college$Top10perc)
hist(college$Top25perc)
hist(college$F.Undergrad)
hist(college$P.Undergrad)
hist(college$Outstate)
hist(college$Room.Board)
hist(college$Books)
hist(college$Personal)
hist(college$PhD)
hist(college$Terminal)
hist(college$S.F.Ratio)
hist(college$Expend)
hist(college$perc.alumni)
auto<-read.csv("./Auto.csv",header=TRUE,na.strings="?")
auto<-na.omit(auto)
str(auto)
# Fit linear regression models with interaction effects
lm_auto_fit<-lm(mpg~horsepower*displacement,data=auto[,1:8])
summary(lm_auto_fit)
lm_auto_fit<-lm(mpg~horsepower*weight,data=auto[,1:8])
summary(lm_auto_fit)
lm_auto_fit<-lm(mpg~horsepower*displacement,data=auto[,1:8])
summary(lm_auto_fit)
lm_auto_fit<-lm(mpg~horsepower*weight+horsepower*displacement,data=auto[,1:8])
summary(lm_auto_fit)
